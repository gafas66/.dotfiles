#+PROPERTY: header-args :tangle yes :results silent

* Debug hints if something goes wrong

1. External prgograms needed

   - ripgrep
   - clojure-lsp
    
2. Xterm and other terminals

   Keep in mind:
   
   - .Xdefaults can set -fg white and -bg black for xterm
   - Select same for gnoterm?

3.  When packages are not loaded or "compatible"
   
   Keep in mind - your *.elc files are made w/emacs version x, they may
   need to be recompiled to be used with x-1.

   Package update may be needed - when packages are updated to new
   version, the old versions are no longer available.

   (e.g., consult was updated Sunday 20150119, when emacs looked
   for 20250117)

* Figure out if we're at work or home

#+begin_src emacs-lisp
  (message "Starting up org-mode init file")
  (setq my-org-dir "~/init/org")
  (setq is-linux (and (getenv "DISPLAY") (if (string= system-type "gnu/linux") t nil)))
  (setq is-home (file-exists-p "/home/erik"))
#+end_src

What is our terminal?

#+begin_src emacs-lisp
  (setq ncolors (cond ((window-system) 25)
                      ((string= (getenv "COLORTERM") "truecolor") 25)
                      (t (length (defined-colors)))))
#+end_src
* Setting up ELPA package system

Here we need some locally downloaded stuff, nerd-icons, org-roam etc

** ELPA

There are version issues around v26/27 versus gpg keys. These are
needed for downloading packages, and have recently (3-4 years)
expired, so recent emacs versions may not have the most recent keys.

The algorithm priority is a workaround.
                        
For package-check-signature, 'allow-unsigned is the default, but this
does not always work.

#+begin_src emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/lisp") ; NOTE My local lisps

  (require 'package)

  (when (< emacs-major-version 27)
    (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")         ; NOTE w/o creates no "gnu", just gnupg
    (require 'gnu-elpa-keyring-update)                             ; NOTE Now accepts gnu archives
    (add-to-list 'package-archives '("nongnu" . "http://elpa.nongnu.org/nongnu/") t))

  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (setq package-check-signature nil)

  (package-initialize)
#+end_src

Find a way to refresh only when its a week since last time
How about creating a file inside elpa, and do (f-touch) on this every refresh?

#+begin_src emacs-lisp
  (unless package-archive-contents
    (package-refresh-contents))
#+end_src

** straight.el setup

Straight includes use-package, so next section is not neeted?

#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name
          "straight/repos/straight.el/bootstrap.el"
          (or (bound-and-true-p straight-base-dir)
              user-emacs-directory)))
        (bootstrap-version 7))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (straight-use-package 'use-package)
  (setq use-package-always-ensure t)
  (setq straight-use-package-by-default t)
#+end_src

* Installing packages

** Programming and Code completion

Let;s start using eglot [2025-01-03 Fri] <- Does not work well with flycheck

#+begin_src emacs-lisp
  (use-package eglot
    :hook
    ((clojure-mode . eglot-ensure)
     (lisp-mode . eglot-ensure)))
#+end_src

Code completion has two main alternatives, company and corfu, trying both.
Even disabled corfu causes issues, dont trust :disabled

#+begin_src emacs-lisp
    (use-package cider)
    ;;(use-package lsp-mode
    ;;  :hook
    ;;  ((clojure-mode . lsp)
    ;;   (bash-mode . lsp))
    ;;  ;;:config
    ;;  ;;(setq lsp-enable-symbol-highlighting    t
    ;;  ;;      lsp-ui-doc-enable                 t
    ;;  ;;      lsp-ui-doc-show-with-cursor       t
    ;;  ;;      lsp-ui-doc-show-with-mouse        t
    ;;  ;;      lsp-lens-enable                   t
    ;;  ;;      lsp-headerline-breadcrumb-enable  t
    ;;  ;;      lsp-ui-sideline-enable            t
    ;;  ;;      lsp-ui-sideline-show-code-actions t
    ;;  ;;      lsp-ui-sideline-show-hover        t
    ;;  ;;      lsp-ui-sideline-show-diagnostics  t
    ;;  ;;      lsp-modeline-code-actions-enable  t
    ;;  ;;      lsp-modeline-diagnostics-enable   t
    ;;  ;;      lsp-diagnostics-provider :none
    ;;  ;;      lsp-eldoc-enable-hover            t
    ;;  ;;      lsp-signature-auto-activate       t
    ;;  ;;      lsp-completion-provider :none
    ;;  ;;      lsp-completion-show-kind          t
    ;;  ;;      )
    ;;  )
    ;;(mapcar (lambda (m) (list (concat m "-mode . lsp")))
    ;;        '("clojure" "bash" "tcl"))
    ;;(use-package lsp-treemacs)
    (use-package company
          :config
          ;(global-set-key (kbd "<tab>") #'company-indent-or-complete-common)
          ;(global-set-key (kbd "<tab>") #'indent)
          (setq company-tooltip-align-annotations t)
          (add-hook 'after-init-hook 'global-company-mode))
#+end_src

Company-box may make company look prettier?
Atm, removes icons, and add nothing !

Quickhelp seems an alternative?

#+begin_src emacs-lisp
  ;;(use-package company-box
  ;;  :hook (company-mode . company-box-mode))
  (use-package company-quickhelp
    :config
    (company-quickhelp-mode))
#+end_src

Now testing out flycheck

#+begin_src emacs-lisp
  (use-package flycheck :ensure t
    :config
    (global-flycheck-mode))
#+end_src

** Presentation fonts/colors/tabs/themes
*** Installing a theme collection

Using goldenrod as default for now, selecting some with C-c h via
hydra. other collections seem to be available.
Color-theme-modern has many different themes.
:ensure t seems to be required here for some reason.

#+begin_src emacs-lisp
  (when (window-system)
    (use-package color-theme-modern :ensure t))
#+end_src

Personal setup for the default(!) emacs colors

#+begin_src emacs-lisp
  (cond ((< 20 ncolors)
         (set-face-attribute 'default                nil :foreground "#DAA520" :background "#001") ;; goldenrod
         (set-face-attribute 'org-level-2            nil :foreground "#FFd700" :background "#001") ;; gold
         (set-face-attribute 'org-block              nil :background "#14171B")
         (set-face-attribute 'org-date               nil :inherit 'help-key-binding :underline nil)
         (set-face-attribute 'highlight              nil :background "#033") ;; cyan - low intensity
         (set-face-attribute 'font-lock-string-face  nil :foreground "#ff0") ;; yellow
         (set-face-attribute 'font-lock-comment-face nil :foreground "#cd5c5c")) ;; indian red
        ((= 8 ncolors) nil) ;; To setup xterm w/8 colors if needed
        ((display-grayscale-p) nil)
        (t nil))
#+end_src
*** Select tab system - centaur on newer emacs versions

Choose tabbar (built-in) or centaur tab, dependent on emacs version.

#+begin_src emacs-lisp
  (if (< emacs-major-version 27)
      (use-package tabbar
        :config (tabbar-mode)
        (set-face-attribute 'tabbar-default    nil :background "gray60")
        (set-face-attribute 'tabbar-unselected nil :background "gray85"  :foreground "gray30" :box nil)
        (set-face-attribute 'tabbar-selected   nil :background "yellow" :foreground "blue"  :box nil :weight 'bold)
        (set-face-attribute 'tabbar-button     nil :box '(:line-width 1 :color "gray72" :style released-button))
        (set-face-attribute 'tabbar-separator  nil :height 0.7)))
#+end_src

Use centaur tabs when version is 27 or newer

#+begin_src emacs-lisp
  (if (> emacs-major-version 26)
      (use-package centaur-tabs
        :after (org)
        :demand
        :config
        (centaur-tabs-mode t)

        (centaur-tabs-change-fonts "arial" 120)
        (setq c/s/bg "#8b4513" c/u/bg "#696969") ;; saddle brown #8b4513
        (set-face-attribute 'centaur-tabs-selected nil :foreground "fff" :background c/s/bg)
        (set-face-attribute 'centaur-tabs-selected-modified nil :foreground "#fff" :background c/s/bg)
        ;;(setq centaur-tabs-set-modified-marker t) ;; Colors will indicate
        (set-face-attribute 'centaur-tabs-unselected nil :foreground "#fff" :background c/u/bg)
        ;;(set-face-attribute 'centaur-tabs-unselected-modified nil :foreground "#322")
        (setq centaur-tabs-set-modified-marker t)
        
        (centaur-tabs-enable-buffer-reordering)
        (setq centaur-tabs-adjust-buffer-order 'right)

        (setq centaur-tabs-set-icons t) ;; Show icons
        (setq centaur-tabs-icon-type 'nerd-icons) ;; or all-the-icons (deprecated)

        (defun centaur-tabs-buffer-groups ()
          "Use as few groups as possible."
          (list (cond ((string-equal "*" (substring (buffer-name) 0 1))
                       (cond ((string-equal "eglot" (downcase (substring (buffer-name) 1 6)))
                              "Eglot")
                             (t
                              "Tools")))
                      ((string-equal "magit" (downcase (substring (buffer-name) 0 5)))
                       "Magit")
                      (t
                       "Default"))))
        (centaur-tabs-group-by-projectile-project);KLUDGE This is actually a bugfix
        :bind
        (("C-<left>" . centaur-tabs-backward)
         ("C-<right>" . centaur-tabs-forward))
        :hook
        ((org-src-mode . centaur-tabs-local-mode)
         (calendar-mode . centaur-tabs-local-mode))))
#+end_src

*** install icons for use in org, modelines, and tabs

Download nerd-icons package, this requires to run
nerd-icons-install-fonts is required.

#+begin_src emacs-lisp
  (use-package nerd-icons
    :config
    (unless (file-exists-p "~/.local/share/fonts/NFM.ttf")
      (nerd-icons-install-fonts t)))
  (use-package nerd-icons-dired
    :hook
    (dired-mode . nerd-icons-dired-mode))
#+end_src

*** Modeline selection and dimmer mode

Dimming the non-active windows may be useful, 20% is default

#+begin_src emacs-lisp :tangle no
    (use-package dimmer
      :config
      (dimmer-configure-which-key)
      ;(dimmer-configure-helm)
      (setq dimmer-fraction 0.2)
      (dimmer-mode t))
#+end_src

Using doom-modeline. Other modelines are available, like powerline and
spacemacs.

#+begin_src emacs-lisp
  (when (window-system)
    (use-package doom-modeline
      :init (doom-modeline-mode 1)
      :config
      (set-face-attribute 'mode-line    nil :background "#232")       ;; These two have only background
      (set-face-attribute 'mode-line-inactive nil :background "#111")
      ;;(set-face-attribute 'doom-modeline nil :foreground "#fff") ;; This is default default
      ;;(set-face-attribute 'doom-modeline-emphasis nil :foreground "#fff")
      (set-face-attribute 'doom-modeline-buffer-file nil :foreground "#fff") ;; Saved filename
      (set-face-attribute 'doom-modeline-buffer-path nil :foreground "#f00") ;; subdir path
      (set-face-attribute 'doom-modeline-buffer-major-mode nil :foreground "#fff") ;; subdir path
      ;;(set-face-attribute 'doom-modeline-battery-normal nil :foreground "#fff") ;; Not used
      ;;(set-face-attribute 'doom-modeline-boon-off-state nil :foreground "#fff") ;; Not used
      ;;(set-face-attribute 'doom-modeline-evil-operator-state nil :foreground "#fff") ;; Not used
      (set-face-attribute 'mode-line nil :foreground "#ddd") ;; Rest of modeline, UTF-8 etc
      ;;(set-face-attribute 'mode-line-active nil :foreground "#fff") ;; Not used
      ;;(set-face-attribute 'mode-line-buffer-id nil :background "#fff")
      ))
#+end_src

Display time in 24h format in modeline
#+begin_src emacs-lisp
  (setq display-time-24hr-format t)
  (display-time-mode 1)
#+end_src

*** Coloring of keywords and marking random text + fic

Fic-mode should work everywhere, hightlight actions and FIXME
etc. Markerpen is manually downloaded.

#+begin_src emacs-lisp
  (require 'markerpen nil :noerror)

  (use-package fic-mode :ensure t)
  (setq p-modes '(tcl-mode-hook ruby-mode-hook perl-mode-hook cperl-mode-hook emacs-lisp-mode-hook python-mode-hook))
  (mapcar (lambda (mode) (add-hook mode 'fic-mode)) p-modes)
  (setq fic-highlighted-words '("FIXME" "TODO" "NOTE" "KLUDGE" "BUG"))
#+end_src

Testing out line-reminder package - test at work failed!

#+begin_src emacs-lisp
  ;(use-package line-reminder
  ;  :config
  ;  (global-line-reminder-mode t))
#+end_src

** EAT Shell inside emacs

Using *eat* as main shell for now, works reasonably well, and seems to
be a better term emulator than ansi-term. Treemacs makes projects
easier.

#+begin_src emacs-lisp
  (use-package eat
    :config
    (setq eat-enable-directory-tracking t)
    (define-key eat-semi-char-mode-map (kbd "M-o") 'ace-window)
    (define-key eat-semi-char-mode-map (kbd "M-0") 'treemacs-select-window)
    (define-key eat-semi-char-mode-map (kbd "M-a")
      (lambda () (interactive) (switch-to-buffer "*Org Agenda*"))))
#+end_src

** Project management

Using treemacs for now. Apparently a package called projectile might be useful.

#+begin_src emacs-lisp
  (use-package treemacs
    :bind (("M-0" . treemacs-select-window)
           ("M-o" . ace-window)))
#+end_src

** Movement and selection - vertico, helm and ido
*** Helm and ido - disabled

Using helm to select commands and buffers etc.Can't get helm
find-files to work properly, so back to normal for that.

tab-bar etc -> this is undefined for some reason, hence setting it to
nil in :init

Avy mode has some other options, like char-1

#+begin_src emacs-lisp
;  (use-package helm
;    :disabled
;    :init (setq tab-bar-tab-name-function nil)
;    :bind
;    (
;     ;("M-x"     . helm-M-x)
;     ("M-y"     . helm-show-kill-ring)
;     ("C-x C-b" . helm-mini)
;     ;("C-x C-f" . helm-find-files) ; using vertico
;     ("M-s o"   . helm-occur)
;     ))
;  (use-package helm-swoop
;    :disabled
;    :bind
;     ("M-i"     . helm-swoop))
;
;  (use-package ido
;    :disabled
;    :config
;    (ido-mode t)
;    (setq ido-use-filename-at-point 'guess)
;    (setq ido-create-new-buffer 'always)
;    (if (< emacs-major-version 25)
;        (setq ido-separator "\n")
;      (setf (nth 2 ido-decorations) "\n"))
;    (setq ido-max-window-height 0.5)
;    (setq ido-enable-flext-matching t)
;    (setq ido-everywhere t)
;    (setq ido-file-extension-order '(".tcl" ".org" ".el"))
;    (setq ido-ignore-directories '(".git"))
;    :bind
;    (("C-x C-f" . 'ido-find-file)
;     ("C-x d"   . 'ido-dired)))
#+end_src

*** Vertico for completion+consult, avy for jump

Using only vertico for completion - simpler than the above

#+begin_src emacs-lisp
  (use-package vertico
    :custom
    (vertico-cycle t)
    :init
    (vertico-mode))
  (use-package marginalia
    :after vertico
    :ensure t
    :custom (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :init
    (marginalia-mode))
  (vertico-reverse-mode)
  ;(use-package vertico-reverse :after vertico :ensure nil)
  ;(use-package vertico-multiform-commands)
  (use-package savehist
    :init
    (savehist-mode))
  ;; Fast jump to any character in any window
  (use-package avy
    :bind
    (("C-:" . 'avy-goto-char-2)))
#+end_src

Trying consult to see how good it is ..

#+begin_src emacs-lisp
  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)
  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t)
  (minibuffer-depth-indicate-mode 1)
  ;;;; Extra Completion Functions
  (use-package consult
    :ensure t
    :after vertico
    :bind (("C-x b"       . consult-buffer)
           ("C-x C-k C-k" . consult-kmacro)
           ("M-y"         . consult-yank-pop)
           ("M-g g"       . consult-goto-line)
           ("M-g M-g"     . consult-goto-line)
           ("M-g f"       . consult-flymake)
           ("M-g i"       . consult-imenu)
           ("M-s l"       . consult-line)
           ("M-s L"       . consult-line-multi)
           ("M-s u"       . consult-focus-lines)
           ("M-s g"       . consult-ripgrep)
           ("M-s M-g"     . consult-ripgrep)
           ("M-s f"       . consult-find)
           ("M-s M-f"     . consult-find)
           ("C-x C-SPC"   . consult-global-mark)
           ("C-x M-:"     . consult-complex-command)
           ("C-c n a"     . consult-org-agenda)
           ("M-X"         . consult-mode-command)
           :map minibuffer-local-map
           ("M-r" . consult-history)
           :map Info-mode-map
           ("M-g i" . consult-info)
           :map org-mode-map
           ("M-g i"  . consult-org-heading))
    :custom
    (completion-in-region-function #'consult-completion-in-region)
    :config
    (recentf-mode t))
#+end_src

*** What-key - show keys and meanings

Show key options:

#+begin_src emacs-lisp
  (use-package which-key
    :config
    (which-key-mode))
#+end_src

** Org mode setup (and org-babel)
*** Main setup

Perhaps use :bind to improve readability below?

#+begin_src emacs-lisp
  (use-package org :straight nil
    :pin gnu
    :config
    (setq org-log-done 'time)
    (setq org-return-follows-link t)
    (add-hook 'org-mode-hook 'org-indent-mode)
    (add-hook 'org-mode-hook 'hl-line-mode)
    (add-hook 'org-agenda-mode-hook 'hl-line-mode)
    (define-key org-mode-map (kbd "C-c <up>") 'org-priority-up)
    (define-key org-mode-map (kbd "C-c <down>") 'org-priority-down)
    (define-key org-mode-map (kbd "C-,") 'hydra-comma/body)
    (define-key global-map "\C-cl" 'org-store-link)
    (define-key global-map "\C-ca" 'org-agenda)
    (define-key global-map "\C-cc" 'org-capture)
    (global-set-key (kbd "M-a") (lambda () (interactive) (switch-to-buffer "*Org Agenda*")))
    ;;(setq org-directory "~/init/org")
    (setq org-default-notes-file "~/init/org/vec.org")
    (setq org-agenda-files (list my-org-dir))
    (define-key org-mode-map (kbd "C-c C-g C-r") 'org-shiftmetaright)
    (setq org-hide-emphasis-markers t)
    (setq org-agenda-window-setup 'current-window)
    (setq org-agenda-restore-windows-after-quit t)
    (setq org-agenda-skip-scheduled-if-done t)
    ;;(setq org-agenda-skip-function-global '(org-agenda-skip-entry-if 'todo 'done))
    )
  (setq org-refile-targets '((nil :maxlevel . 9)
                             (org-agenda-files :maxlevel . 9)))
  (setq org-todo-keywords
        '((sequence "TODO" "IN-PROGRESS" "|" "CANCELLED" "DONE")))
#+end_src

*** Refile targets and depth

Limit how many headlines  are available for refile

#+begin_src emacs-lisp
  (setq org-refile-targets '(("vec.org" :maxlevel . 1)
                             ("home.org" :maxlevel . 2)))
#+end_src
*** Babel setup - various programming languages inside org mode

We change the default of asking to execute w/C-c C-c
It seems the ob-tcl does not exist, as it should?

#+begin_src emacs-lisp
  (require 'ob-clojure)
  (require 'ob-ruby)
  (require 'ob-shell)
  (require 'ob-tcl nil :noerror)
                                          ;(require ob-perl)
  (setq org-babel-clojure-backend 'cider)
  (setq org-confirm-babel-evaluate nil)
#+end_src

*** Babel templates C-c C-,

#+begin_src emacs-lisp
  (require 'org-tempo)
  (setq org-structure-template-alist '())
  (add-to-list 'org-structure-template-alist '("s" . "src sh\n"))
  (add-to-list 'org-structure-template-alist '("e" . "src emacs-lisp\n"))
  (add-to-list 'org-structure-template-alist '("c" . "src clojure\n"))
  (add-to-list 'org-structure-template-alist '("t" . "src tcl\n"))
#+end_src

*** Bullets and fonts for headlines

Here follows setup with coloring and bullets for orgmode. Not sure yet about the fonts and their sizes.

#+begin_src emacs-lisp
  (use-package org-bullets
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
    (font-lock-add-keywords 'org-mode
                            '(("^ +\\([-*]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•")))))))
    (defcustom org-bullets-bullet-list
      '(;;; Large
        ;; "◉"
        ;; "○"
        ;; "✸"
        ;; "✿"
        ;; ♥ ● ◇ ✚ ✜ ☯ ◆ ♠ ♣ ♦ ☢ ❀ ◆ ◖ ▶
             ;;; Small
        "►"
        "•"
        "★"
        "▸"
        )
      "List of bullets used in Org headings.
         It can contain any number of symbols, which will be repeated."
      :group 'org-bullets
      :type '(repeat (string :tag "Bullet character")))

  ;  (if nil (when window-system
  ;            (let* ((variable-tuple (cond ((x-list-fonts "Source Sans Pro") '(:font "Source Sans Pro"))
  ;                                         ((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
  ;                                        ((x-list-fonts "Verdana")         '(:font "Verdana"))
  ;                                        ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
  ;                                        (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
  ;                   (base-font-color     (face-foreground 'default nil 'default))
  ;                   (headline           `(:inherit default :weight bold :foreground ,base-font-color)))
  ;              (custom-theme-set-faces 'user
  ;                                      `(org-level-8 ((t (,@headline ,@variable-tuple))))
  ;                                      `(org-level-7 ((t (,@headline ,@variable-tuple))))
  ;                                      `(org-level-6 ((t (,@headline ,@variable-tuple))))
  ;                                      `(org-level-5 ((t (,@headline ,@variable-tuple))))
  ;                                      `(org-level-4 ((t (,@headline ,@variable-tuple :height 1.1))))
  ;                                      `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.2))))
  ;                                      `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.3))))
  ;                                      `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.4))))
  ;                                     `(org-document-title ((t (,@headline ,@variable-tuple :height 1.5 :underline nil))))))))
#+end_src

*** Unicode pretty symbols

From https://github.com/jonnay/emagicians-starter-kit/blob/master/Programming.org
Apparently built-in, but need some settings, taken from above.

This is lambda - a greek symbol.

#+begin_src emacs-lisp
  (global-prettify-symbols-mode t)
  (defvar emagician/prettify-list
    '(("lambda" . 955)
      ("<=" . (?\s  (Br . Bl) ?\s (Bc . Bc) ?≤))
      (">=" . (?\s  (Br . Bl) ?\s (Bc . Bc) ?≥))
      ("->" . ?⟶)
      ("=>" . ?⟹)
      ("==" . ?⩵)
      ("//" . (?\s  (Br . Bl) ?\s (Bc . Bc) ?⫽))
      ("!=" . (?\s  (Br . Bl) ?\s (Bc . Bc) ?≠))
      ("->>" .  (?\s (Br . Bl) ?\s (Br . Bl) ?\s
                     (Bl . Bl) ?- (Bc . Br) ?- (Bc . Bc) ?>
                     (Bc . Bl) ?- (Br . Br) ?>))))
  (setq prettify-symbols-unprettify-at-point 'right-edge)
  (setq prettify-symbols-alist emagician/prettify-list)
#+end_src

*** Setup of org templates (C-c c), creating actions distributed across multiple files

Here are templates for capturing tasks for December 2024, focused on VEC project at work

#+begin_src emacs-lisp
  (setq outline-minor-mode-cycle t)

  (setq org-capture-templates
        '(("t" "General task"       entry (file+regexp org-default-notes-file "Tasks")            "* TODO %?\nSCHEDULED: %t\n  %i\n  %a")
          ;;("c" "C2C task"           entry (file+headline "~/init/org/vec.org" "C2C tasks" )     "* TODO %?\nSCHEDULED: %t\n  %i\n  %a")
          ;;("p" "PCIE task"          entry (file+headline "~/init/org/vec.org" "PCIE tasks")     "* TODO %?\nSCHEDULED: %t\n  %i\n  %a")
          ;;("v" "VEC top-level task" entry (file+regexp "~/init/org/vec.org" "VEC Top.*" )       "* TODO %?\nSCHEDULED: %t\n  %i\n  %a")
          ;;("e" "Emacs task"         entry (file+headline "~/init/org/home.org" "Emacs Tasks")   "* TODO %?\nSCHEDULED: %t\n  %i\n  %a")
          ;;("l" "Clojure task"       entry (file+headline "~/init/org/home.org" "Clojure Tasks") "* TODO %?\nSCHEDULED: %t\n  %i\n  %a")
          ("j" "Journal (C-o)"        entry (file+olp+datetree "~/init/org/journal.org")          "* %?\nEntered on %U\n%i\n  %a")
          ))

  (global-set-key "\C-o" (lambda () (interactive) (execute-kbd-macro (read-kbd-macro "C-c c j"))))
  (global-set-key (kbd "C-=") (lambda () (interactive) (find-file "~/init/org/journal.org")))
  
  (setq org-agenda-custom-commands
        '(("u" "Untagged tasks" tags-todo "-{.*}")))
                                          ;	("d" "Daily Agenda"
                                          ;	 ((agenda "" ((org-agenda-span 'day)
                                          ;		      (org-deadline-warning-days 7)))))))
#+end_src

*** Org subtasks and helm-org

Procedure for inserting sub-task , have not really used this yet

#+begin_src emacs-lisp
  (defun my-org-insert-sub-task ()
    (interactive)
    (let ((parent-deadline (org-get-deadline-time nil)))
      (org-goto-sibling)
      (org-insert-todo-subheading t)
      (when parent-deadline
        (org-deadline nil parent-deadline))))
  (define-key org-mode-map (kbd "C-c s") 'my-org-insert-sub-task)
#+end_src

The helm-org below I've not got to work yet, not sure what it does !

#+begin_src emacs-lisp :tangle no
      (use-package helm-org
        ;:config
        ;(add-to-list 'helm-completing-read-handlers-alist '(org-capture . helm-org-completing-read-tags))
        ;(add-to-list 'helm-completing-read-handlers-alist '(org-set-tags . helm-org-completing-read-tags))
        )
      (add-hook 'helm-mode-hook
                (lambda ()
                  (add-to-list 'helm-completing-read-handlers-alist '(org-capture . helm-org-completing-read-tags))
                  (add-to-list 'helm-completing-read-handlers-alist '(org-set-tags . helm-org-completing-read-tags))))
#+end_src

*** Org roam for "brain" functionality

This peackage seems to need some SQL functionality compiled with
emacs, or installed in unix. 

#+begin_src emacs-lisp
  (when (> emacs-major-version 28)
    ;;(require 'emacsql nil :noerror)
    (use-package emacsql :ensure t)
    ;;(use-package emacsql-sqlite)
    (use-package org-roam
      :init
      (setq org-roam-v2-ack t)
      (setq ek/roamnotes "~/init/RoamNotes")
      (unless (file-directory-p ek/roamnotes) (make-directory ek/roamnotes))
      ;;(setq org-roam-db-location "~/init/org-roam.db") ; Quick to rebuild on another machine
      :custom
      (org-roam-directory ek/roamnotes)
      (org-roam-completion-everywhere t)
      :bind (("C-c n l" . org-roam-buffer-toggle)
             ("C-c n f" . org-roam-node-find)
             ("C-c n i" . org-roam-node-insert)
             :map org-mode-map
             ("C-M-i" . completion-at-point))
      :config
      (org-roam-setup)))
#+end_src
*** Journal setup

Try to be more active with journals, fast key, and one per month (week?)

#+begin_src emacs-lisp
  (defun open-journal-file ()
    (let* ((today (format-time-string "%Y-%m"))
           (path (concat (getenv "HOME") "/path/to/my/journal/" today ".org"))
           (hdr-list (list (concat "#+TITLE: [" today "]")
                           "#+OPTIONS: toc:nil num:nil author:nil date:nil"
                           "#+STARTUP: align"
                           "#+HTML_HEAD: <link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\" />"
                           "#+LaTeX_CLASS: article"
                           "#+LaTeX_CLASS_OPTIONS: [9pt,twocolumn,portrait]"
                           "#+LATEX_HEADER: \\usepackage[margin=0.5in]{geometry}"
                           "#+LATEX_HEADER: \\usepackage{enumitem}"))
           (hdr (apply 'concat
                       (mapcar (lambda (s) (concat s "\n"))
                               hdr-list)))
           (has-hdr (lambda ()
                      (save-excursion
                        (goto-char (point-min))
                        (search-forward "#+TITLE" nil t)))))
      (message (concat "opening " path " ..."))
      (find-file path)
      (unless (funcall has-hdr)
        (save-excursion
          (goto-char (point-min))
          (insert hdr)))
      (message "Enjoy your journaling!")))
  ;;(global-set-key "\C-o" (lambda () (interactive) (find-file "~/init/org/journal.org"))) ;;(open-journal-file)))
#+end_src
** Hydra mode setup for keybinding selections

Hydra allows a menu for a key or keyseq. bind-key has not really been used yet.

*** Installing hydra, M-SPC works?

M-SPC works for TightVNC, but not for UltraVNC

#+begin_src emacs-lisp
  (use-package bind-key)
  (use-package major-mode-hydra
    :bind
    ("M-SPC" . major-mode-hydra) ;Can we make this key work?
    )
#+end_src

*** Hydra selectors for themes, toggle modes, shell, cider

#+begin_src emacs-lisp
  (setq good-themes
        '(goldenrod classic cobalt dark-blue2 desert digital-ofs1 euphoria feng-shui fischmeister
                    late-night lawrence ld-dark lethe marquardt retro-green xemacs tango-dark))

  (defun ek-theme (theme) (interactive) (mapcar #'disable-theme custom-enabled-themes) (load-theme theme t t) (enable-theme theme))

  (defun ek/hcm () (interactive) (highlight-changes-mode t))
  (defhydra hydra-appearance (:color blue)
    ("1" (ek-theme 'wheat)             "wheat"             :column "Theme")
    ("2" (ek-theme 'goldenrod)         "goldenrod"         :column "Theme")
    ("3" (ek-theme 'classic)           "classic"           :column "Theme")
    ("4" (ek-theme 'cobalt)            "cobalt"            :column "Theme")
    ("5" (ek-theme 'feng-shui)         "feng-shui"         :column "Theme")
    ("6" (ek-theme 'late-night)        "late-night"        :column "Theme")
    ("7" (ek-theme 'retro-green)       "retro-green"       :column "Theme")
    ("8" (ek-theme 'word-perfect)      "word-perfect"      :column "Theme")
    ("9" (ek-theme 'taming-mr-arneson) "taming-mr-arneson" :column "Theme")
    ("0" (ek-theme 'light-blue)        "light-blue"        :column "Theme")
    ("a" (ek-theme 'leuven)            "leuven"            :column "Theme")
    ("b" (ek-theme 'gruvbox)           "gruvbox"           :column "Theme")

    ("l" display-line-numbers-mode "line-numbers"       :column "Toggle")
    ("c" column-number-mode        "columns"            :column "Toggle")
    ("g" hl-line-mode              "hl-line"            :column "Toggle")
    ("G" global-hl-line-mode       "hl-line GLOBAL"     :column "Toggle")
    ("t" toggle-truncate-lines     "truncate"           :column "Toggle")
    ("h" ek/hcm                    "highlight changes"  :column "Toggle")
    ("f" follow-mode               "follow"             :column "Toggle")
    ("v" visual-line-mode          "visual-line"        :column "Toggle")
    ("w" whitespace-mode           "whitespace"         :column "Toggle")

    ;("m" helm-all-mark-rings       "mark-rings"     :column "Helm")
    ;("r" helm-register             "registers"      :column "Helm")
    ;("p" helm-top                  "top"            :column "Helm")
    ;("o" helm-colors               "Pick color"     :column "Helm")

    ("m" elfeed                     "ELFEED rss"     :column "Various")
    ;("r" helm-register             "registers"      :column "Helm")
    ;("p" helm-top                  "top"            :column "Helm")
    ;("o" helm-colors               "Pick color"     :column "Helm")

    ("q" nil                       "Quit menu" :color red :column nil))
  (global-set-key (kbd "C-c h") 'hydra-appearance/body)

#+end_src

*** Hydra for lisp modes, emacs-lisp and clojure

For these two hydras, M-SPC is the key (does it work though?)

#+begin_src emacs-lisp

  (major-mode-hydra-define emacs-lisp-mode nil
    ("Eval"
     (("b" eval-buffer "buffer")
      ("e" eval-defun "defun")
      ("r" eval-region "region")
      ("q" nil "quit"))
     "REPL"
     (("I" ielm "ielm"))
     "Test"
     (("t" ert "prompt")
      ("T" (ert t) "all")
      ("F" (ert :failed) "failed"))
     "Doc"
     (("d" describe-foo-at-point "thing-at-pt")
      ("f" describe-function "function")
      ("v" describe-variable "variable")
      ("i" info-lookup-symbol "info lookup"))))
#+end_src

Connect buffer to server is for example for bb --nrepl-server

#+begin_src emacs-lisp
  (major-mode-hydra-define clojure-mode nil
    ("Connect"
     (("j" cider-jack-in      "jack-in")
      ("J" cider-jack-in-cljs "jack-in-cljs")
      ("c" cider-connect      "Connect buffer to server")
      ("R" nil "TBD reconnect")
      ("Q" nil "TBD disconnect")
      ("q" nil "quit"))))

#+end_src

*** Hydra for shell and markerpen

#+begin_src emacs-lisp

  (defhydra hydra-shell-stuff (:color blue)
    "Shells"
    ("s" shell                   "shell")
    ("a" (ansi-term "/bin/bash") "ansi-term")
    ("e" (eat "/bin/bash" "echo hi") "eat-term")
    ("r" rename-buffer           "Rename buffer"))
  (global-set-key [f2] 'hydra-shell-stuff/body)

  (global-set-key (kbd "C-'") 'erase-buffer)
  (global-set-key (kbd "C-x r p") 'replace-rectangle)

  (defhydra hydra-comma (:color blue)
    "Toggle"
    ("m" markerpen-mark-region      "mark region")
    ("c" markerpen-clear-all-marks  "clear all marks")
    ("r" (markerpen-mark-region 1)  "red")
    ("g" (markerpen-mark-region 2)  "grey")
    ("y" (markerpen-mark-region 3)  "yellow")
    ("b" (markerpen-mark-region 4)  "blue")
    ("u" (markerpen-mark-region 5)  "underline"))
  (global-set-key (kbd "C-,") 'hydra-comma/body)
#+end_src

** Elfeed for reading rss (test)

Lets check this out ...

#+begin_src emacs-lisp
  (use-package elfeed
    :config
    (setq browse-url-browser-function 'eww-browse-url)
    (setq elfeed-feeds
          '(
            "https://www.document.no/feed/atom/"
            "https://www.rights.no/feed/"
            "https://steigan.no/feed/"
            ;"http://nullprogram.com/feed/"
            ;"https://planet.emacslife.com/atom.xml"
            )))
#+end_src
** Magit

Lets try us start using magit to check in stuff more continuously from
emacs.

#+begin_src emacs-lisp
  (when (< 28 emacs-major-version)
    (use-package magit))
#+end_src
* Other settings
** Various toggle settings

#+begin_src emacs-lisp
  (require 'my-auto-insert)
#+end_src
#+begin_src emacs-lisp
  (setq inhibit-startup-message t) 
  ;;(setq initial-scratch-message nil)
  (setq bookmark-save-flag 1)
  (defalias 'yes-or-no-p 'y-or-n-p)

  (winner-mode 1) ;;Allows revert windows content/position history w/ C-c <|> 
  (ffap-bindings) ;;ffap = fINDfILEaTPoint
  (setq visible-bell t)
  (tool-bar-mode -1)
  ;;(scroll-bar-mode -1)

  (global-hi-lock-mode 1)
  (show-paren-mode t)
  (put 'erase-buffer 'disabled nil)
  (put 'narrow-to-region 'disabled nil)
  ;; Stop any ui dialogs
  (setq use-dialog-box nil)
  (global-auto-revert-mode 1)
  (setq global-auto-revert-non-file-buffers nil)
#+end_src

** Emacs shell setup

Normal (non-eat) emacs shell (not eshell)

#+begin_src emacs-lisp
  (autoload 'ansi-color-for-comint-mode-on "ansi-color" nil t)
  (add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
  (add-hook 'shell-mode-hook (lambda () (face-remap-set-base 'comint-highlight-prompt :inherit nil)))

  (setq display-buffer-alist '(("\\`\\*e?shell" display-buffer-same-window)))

  (setq ansi-color-names-vector
        ["black" "tomato" "PaleGreen2" "gold1"
         "blue" "MediumOrchid1" "cyan" "white"])
  ;; NOTE Fix ansi-term keys we want(!)
  (add-hook 'term-mode-hook (lambda () (define-key term-raw-map (kbd "M-o") 'ace-window)))
  (add-hook 'term-mode-hook (lambda () (define-key term-raw-map (kbd "M-0") 'treemacs-select-window)))
  (add-hook 'term-mode-hook (lambda () (define-key term-raw-map (kbd "M-x") 'helm-M-x)))
  (add-hook 'term-mode-hook (lambda () (define-key term-raw-map (kbd "M-RET") 'shell-resync-dirs)))
#+end_src

** Dumb terminals

This is for putty on windows 10
putty: "dumb"
debian, rocky,xterm: "eterm-color"

#+begin_src emacs-lisp
    (setq TERM (getenv "TERM"))
    (setq LANG (getenv "LANG"))
    (setq LANGUAGE (getenv "LANGUAGE"))
    (setq COLORTERM (getenv "COLORTERM"))
    (setq GNOME_TERMINAL_SCREEN (getenv "GNOME_TERMINAL_SCREEN"))
#+end_src

TERM = eterm-color; Both in gui and -nw on gnome terminals + xterm
COLORTERM = nil on xterm

(face-attribute 'default :background)

Testing:


#+begin_src emacs-lisp
  (unless (window-system)
    (message "Setting up terminal keys")
    (bind-key "M-[ B"   'next-line)
    (bind-key "M-[ A"   'previous-line)
    (bind-key "M-[ C"   'right-char)
    (bind-key "M-[ D"   'left-char)
    (global-set-key (kbd "[1;5D") #'centaur-tabs-backward)     ; C- <left>
    (global-set-key (kbd "[1;5C") #'centaur-tabs-forward)      ; C- <right>
    (bind-key "M-[ z"   'backtab)
    (bind-key "M-[ z"   'org-shifttab org-mode-map)
    ;; NOTE Double control keys may not be available (C-c C-,)
    (bind-key "C-c ,"   'org-insert-structure-template org-mode-map)
    (global-set-key (kbd "M-O Q") #'hydra-shell-stuff/body) ; [f2]
    (unless COLORTERM ;; assuming we have an xterm here
      (message "Setting keys and background for xterm")
      (global-set-key (kbd "ø") #'execute-extended-command)   ; M-x
      (global-set-key (kbd "÷") #'kill-ring-save)             ; M-w
      (global-set-key (kbd "ù") #'yank-pop)                   ; M-y
      (global-set-key (kbd "¼") #'beginning-of-buffer)        ; M-<
      (global-set-key (kbd "¾") #'end-of-buffer)              ; M->
      (global-set-key (kbd "ä") #'kill-word)                  ; M-d
      (global-set-key (kbd "í") #'back-to-indentation)        ; M-m
      (global-set-key (kbd "ï") #'ace-window)                 ; M-o
      (global-set-key (kbd "¯") #'dabbrev-expand)             ; M-/
      (global-set-key (kbd "°") #'treemacs)                   ;M-0 (zero)
      (set-face-attribute 'help-key-binding nil :background "#000")
      ;;(set-face-attribute 'help-key-binding nil :background "#000")
      (set-face-attribute 'centaur-tabs-default  nil
                          :foreground "white"
                          :background "black"
                          )
      ))
#+end_src

** Other functions like ek-set mode and inital text size


Below mode is intended to be used to highlight interesting stuff in innovus/etc log files

#+begin_src emacs-lisp
  (defun ek-hi-set ()
    (interactive)
    ;;(hi-lock-mode -1) ;;disable the mode
    (hi-lock-mode)
    (unhighlight-regexp ".*")
    (highlight-lines-matching-regexp "^**WARN:.*$" 'hi-green-b)
    ;;(highlight-lines-matching-regexp "^\\(#WARNING\\).*$" 'hi-red-b)
    (highlight-lines-matching-regexp "^**ERR.*$" 'hi-red-b)
    (highlight-lines-matching-regexp "^ *Slack:=.*$" 'hi-red-b)
    )
  (global-set-key (kbd "<f5>") 'ek-hi-set)

#+end_src

Setup text resolution based on what we can figure out about the current system.

#+begin_src emacs-lisp

  ;; Get screen info if on X
  (if is-linux
      ;;(if (= (string-to-number (getenv "SHLVL")) 3) ;; TODO test instead for existence of X and command below
      (progn
        (setq dimensions (shell-command-to-string "xdpyinfo | grep dimension"))
        (string-match "\\([0-9]+\\)x\\([0-9]+\\) pixels (\\([0-9]+\\)x\\([0-9]+\\)" dimensions)
        (setq width  (string-to-number (match-string 1 dimensions)))
        (setq height (string-to-number (match-string 2 dimensions)))
        )
    (progn
      (setq width  1920)
      (setq height 1080)))

  (when (window-system)
                                          ; Set according to screen resolution
    (cond ((> height 1590) (set-face-attribute 'default nil :height 120))
          ((= height 1080) (set-face-attribute 'default nil :height 80))
          (t nil)))
#+end_src

* Setting up default windows

#+begin_src emacs-lisp
  (org-agenda-list)
#+end_src

#+begin_src emacs-lisp
  (when nil ;;(window-system)
    (split-window-right)
    (split-window-right)
    (balance-windows)
    (select-window (nth 0 (window-list)))
    (find-file "~/.dotfiles/settings.org")
    (select-window (nth 1 (window-list)))
    (find-file "~/prj/cljs-world/src/cljs_world/core.cljs")
    ;;(select-window (nth 2 (window-list)))
    ;;(find-file "~/.dotfiles/settings.org"))
    )
#+end_src
* Testing stuff and temporary commands/keys

Candidates for keys are

| Key | Default            |
|-----+--------------------|
| M-t | transpose words    |
| M-a | backward sentrence |
| M-p | undefined          |
| M-r | move to top/bottom |

** Check centaur buffer type w/M-t key

#+begin_src emacs-lisp
  (defun my/check-buffer-group ()
    "Show what type of centaur buffer this is"
    (interactive)
    (message (car (centaur-tabs-buffer-groups))))
  (global-set-key (kbd "M-t") 'my/check-buffer-group)
  (define-key eat-semi-char-mode-map (kbd "M-t") 'my/check-buffer-group)
#+end_src

* End of file

# Local Variables:
# eval: (org-content 3)
# End:
